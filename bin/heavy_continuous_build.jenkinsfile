pipeline {
	agent {label 'linux'}

    options {
        gitLabConnection('GitLab Connection for Jenkins')
        buildDiscarder(logRotator(artifactDaysToKeepStr: '10', artifactNumToKeepStr: '10', daysToKeepStr: '365', numToKeepStr: '365'))
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
    }

	stages {
		stage ('Compile') {
            steps {
        	    gitlabCommitStatus(name: "Compile and install") {
                    withMaven{sh 'mvn clean test-compile'}
                }
            }
        }
        stage ('Unit Tests') {
			steps {
				gitlabCommitStatus(name: "Unit Tests") {
				    withMaven{sh 'mvn install cobertura:cobertura'}
                }
			}
		}
		stage('Post build') {
            parallel {
            	stage ('JUnit results') {
					steps {
						gitlabCommitStatus(name: "Archive JUnit-formatted test results") {
							junit '**/surefire-reports/TEST*.xml'
						}
					}
				}
				stage ('Archive') {
					steps {
						gitlabCommitStatus(name: "Archive artifacts") {
							archiveArtifacts artifacts: 'target/*jar', fingerprint: true
						}
					}
				}        	
				stage ('PMD results') {
					steps {
						gitlabCommitStatus(name: "PMD analysis results") {
							withMaven{sh 'mvn pmd:pmd'}
						    pmd canComputeNew: false, defaultEncoding: '', healthy: '', pattern: '', unHealthy: '', unstableNewAll: '0'
		                }
					}
				}
				stage ('FindBugs results') {
					steps {
						gitlabCommitStatus(name: "FindBugs analysis results") {
						    withMaven{sh 'mvn findbugs:findbugs'}
						    findbugs canComputeNew: false, defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', pattern: '**/findbugsXml.xml', unHealthy: '', unstableNewAll:'0'
		                }
					}
				}
				stage ('Cobertura report') {
					steps {
						gitlabCommitStatus(name: "Cobertura Coverage Report") {
						    cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: '**/target/site/cobertura/coverage.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
		                }
					}
				}
			}
		}
	}
}

def withMaven(def body){
    def java = tool 'JDK 8 x86_64'
    def maven = tool 'Maven 3.5.x'
    withEnv(["JAVA_HOME=${java}", "PATH+MAVEN=${maven}/bin"]){
        body.call()
    }
}
